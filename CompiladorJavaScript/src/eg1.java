/* Generated By:JavaCC: Do not edit this line. eg1.java */
import java.util.Vector;
import java.util.HashMap;
public class eg1 implements eg1Constants {
        static HashMap<String, TablaSimbolos> tablas = new HashMap <String, TablaSimbolos>();
        static TablaSimbolos tablageneral = new TablaSimbolos();
        static TablaSimbolos tablaactiva = tablageneral;

        static String nombrefuncion="HHHH";

        public static void main(String args []) throws ParseException
        {
                tablas.put("general",tablageneral);
            eg1 parser;// = new eg1(System.in);
                if(args.length == 0){// ejecucion sin argumentos
                System.out.println ("ExampleParser: Leyendo de la entrada estandar ...");
                parser = new eg1(System.in);
        }else if(args.length == 1){// ejecucion con fichero de entrada
                System.out.println ("ExampleParser: Leyendo el fichero " + args[0]);
                try {
                parser = new eg1(new java.io.FileInputStream(args[0]));
                }
                catch(java.io.FileNotFoundException e) {
                System.out.println ("ExampleParser: El fichero " + args[0] + " no ha sido encontrado.");
                return;
                }
        }else {// en otro caso
                System.out.println ("ExampleParser:  Debes utilizarlo de una de las siguientes formas:");
                System.out.println ("         java ExampleParser < fichero");
                System.out.println ("Or");
                System.out.println ("         java ExampleParser fichero");
                return;
        }
        //  String linea;
        boolean cond = true;
        while (cond)
        {
        if (args.length == 1)
                        System.out.println("Leyendo linea");
        else
              {
                        System.out.println("Leyendo de teclado...");
                        System.out.print("Enter an expression like \u005c"1+(2+3)*4;\u005c" :");
             }
              try
              {
                switch (eg1.one_line())
                {
                  case -1 :
                  System.out.println("Fin fichero"); // fin fichero
                  cond = false;
                  break;
                  case 0 :
                  System.out.println("OK.");
                  break;
                  case 1 :
                  System.out.println("OK. Funcion");
                  tablageneral.imprimir();
                  tablaactiva.imprimir();
                  break;
                  case 2 :
                  System.out.println("Ok. Sentencia");
                  break;
                  case 3 :
                  System.out.println("Ok. Expresion");
                  break;
                  case 4 :
                  System.out.println("Ok. Asignacion");
                  break;
                  default :
                  break;
                }
              }
              catch (Exception e)
              {
                System.out.println("NOK.");
                System.out.println(e.getMessage());
                eg1.ReInit(System.in);
              }
              catch (Error e)
              {
                System.out.println("Oops.");
                System.out.println(e.getMessage());
                break;
              }
            }
            System.out.println("Las tablas que hay son: "+tablas.toString());
            if (tablas.containsKey("general"))
            {
                TablaSimbolos nueva=tablas.get("general");
                nueva.imprimir();
           }
            else
                System.out.println("NO TIENES NI ZORRA");
         }

  static final public int one_line() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
      Funcion();
                {if (true) return 1;}
      break;
    case DO:
    case IF:
    case VAR:
    case RETURN:
    case PROMPT:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case PARENDRCHA:
    case LLAVEDRCHA:
    case PUNTOYCOMA:
      Sentencia();
                {if (true) return 2;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return -1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Funcion() throws ParseException {
  Token t;
  Token t2;
  Vector v = null;
  Symbol simbolo;
    t = jj_consume_token(FUNCTION);
    t2 = jj_consume_token(IDENTIFICADOR);
                        nombrefuncion=t2.image;
                        simbolo = new Symbol(t2.image,t.beginLine);
                        tablageneral.insertarTS(t2.image,simbolo);
                        //Necesito el nombre para guardarlo en la tabla de simbolos como clave

    jj_consume_token(PARENDRCHA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      v = ParameterList();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(PARENIZQ);
    CompoundStatement();
                if( v == null) {
                        v = new Vector();
                }
  }

// Returns a Vector of strings, one for each identifier.
  static final public Vector ParameterList() throws ParseException {
        Token t;
        Vector v = new Vector();
    t = jj_consume_token(IDENTIFICADOR);
            System.out.println("tabla activa");
        v.addElement(t.image);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMA);
      t = jj_consume_token(IDENTIFICADOR);
                            v.addElement(t.image);
    }
                                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public void CompoundStatement() throws ParseException {
        Token t;
        JSVarDeclExpression vars;
        Vector<Token> v;
    //Con la entrada de un bloque, la operación set crea una nueva subtabla (dentro de la TS) ////////////////////////////////////////////
      //No hay funciones anidadas
      t = jj_consume_token(LLAVEDRCHA);
//
//Entro en un bloque, luego creo una nueva subtabla como pone en los apuntes
//  stmts = new JSCompoundStatement(t);
                tablaactiva = new TablaSimbolos(tablageneral);
                tablas.put(nombrefuncion, tablaactiva);//tablas es una lista de hash que guarda los nombres de tablas

    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DO:
      case IF:
      case VAR:
      case RETURN:
      case PROMPT:
      case IDENTIFICADOR:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case PARENDRCHA:
      case LLAVEDRCHA:
      case PUNTOYCOMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      vars = Sentencia();
    }

    jj_consume_token(LLAVEIZQ);
                tablaactiva = tablas.get("general");
  }

  static final public JSVarDeclExpression Sentencia() throws ParseException {
  Token t;
  JSVarDeclExpression v=null;
  AsignInstruccion i=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case PARENDRCHA:
      i = AssignmentExpression();

      break;
    case PUNTOYCOMA:
      t = jj_consume_token(PUNTOYCOMA);

      break;
    case IF:
      t = jj_consume_token(IF);
      Condicion();
      Sentencia();

      break;
    case DO:
      t = jj_consume_token(DO);
      Sentencia();
      jj_consume_token(WHILE);
      Condicion();

      break;
    case VAR:
      t = jj_consume_token(VAR);
      v = VariablesOrExpression();

      break;
    case RETURN:
      t = jj_consume_token(RETURN);
      Expresion();

      break;
    case PROMPT:
      t = jj_consume_token(PROMPT);
      Prompt();

      break;
    case LLAVEDRCHA:
      CompoundStatement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public JSVarDeclExpression VariablesOrExpression() throws ParseException {
        Token t=null; //Los tokens que vaya leyendo los almacenaré aqui desde el lexico
        Vector v = null;   // Aqui me pasan las variables declaradas de la produccion siguiente del arbol
        JSVarDeclExpression e = null; //
        Symbol simbolo;
    v = Variables();
                                                        int i=0;
                                                        while(v.size() > i)
                                                        {//Introduce el tipo JSVarDecl
                                                                Token tok= (Token)v.get(i);
                                                                        System.out.println("elemento "+tok);
                                                                if (tablaactiva.existeClave(tok.image))
                                                                {
                                                                        System.out.println("La variable "+tok+" ya ha sido declarada");
                                                                }
                                                                else
                                                                {
                                                                        simbolo = new Symbol(tok.image, tok.beginLine);
                                                                        tablaactiva.insertarTS(tok.image, simbolo);
                                                                }
                                                                i++;
                                                        }
                                e = new JSVarDeclExpression(t, v);
                {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public Vector<Token > Variables() throws ParseException {
        Vector v = new Vector<Token>();
        Token t;
    t = Variable();
        v.addElement(t);
        //Inserto en la tabla activa el nombre de la variable que se ha declarado
        //tablaactiva.insertarTS();

    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      t = Variable();
        v.addElement(t);
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  static final public Token Variable() throws ParseException {
        Token t;
    t = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      AssignmentExpression();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public JSExpresion Condicion() throws ParseException {
  JSExpresion op=null;
    jj_consume_token(PARENDRCHA);
    Expresion();
    jj_consume_token(PARENIZQ);
                        {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public int Prompt() throws ParseException {
//Declaraciones
        Token t;
    jj_consume_token(PARENDRCHA);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(PARENIZQ);
                System.out.println("LLAMADA PROMPT");
                {if (true) return 2;}
    throw new Error("Missing return statement in function");
  }

  static final public JSExpresion Expresion() throws ParseException {
        Token t;
        JSExpresion expr=null;
        AsignInstruccion asig1;
    asig1 = AssignmentExpression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      t = jj_consume_token(COMA);
      AssignmentExpression();
    }
                {if (true) return expr;}
    throw new Error("Missing return statement in function");
  }

  static final public AsignInstruccion AssignmentExpression() throws ParseException {
        Token t=null;
        InterrogInstruccion op=null;
        JSAritmetica rel=null;
        AsignInstruccion res=null;
        JSExpresion id=null;
        JSExpresion aux= null;
    id = PrimaryExpression();
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(ASIGNACION);
      rel = AdditiveExpression();
    }
                        res=new AsignInstruccion(id, aux);
                        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  static final public InterrogInstruccion ConditionalExpression() throws ParseException {
        Token t;
        JSRelacional and;
        InterrogInstruccion op=null;
        AsignInstruccion asign1=null;
        AsignInstruccion asign2=null;
    //En lugar de AndExpression deberia de ser una condicion no?
    //Falta hacer el resultado de AssignmentExpression()
      and = AndExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERROGANTE:
      t = jj_consume_token(INTERROGANTE);
      asign1 = AssignmentExpression();
      jj_consume_token(DOSPUNTOS);
      asign2 = AssignmentExpression();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                op=new InterrogInstruccion(and,asign1,asign2);
                {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

////////////////////////////////////////////////////////////////////////////////////////////
//Precedence is achieved using the cascading style,										  //
//where each production calls the higher-precedent production immediately following it.   //
//////////////////////////////////////////////////////////////////////////////////////////// 
  static final public JSRelacional AndExpression() throws ParseException {
        Token t=null;
        JSRelacional op=null;
        JSOperacion op1=null;
        JSOperacion op2=null;
    op1 = RelationalExpression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(AND);
      op2 = RelationalExpression();
    }
                op= new JSRelacional(t, op1, op2);
                {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public JSRelacional RelationalExpression() throws ParseException {
        Token t=null;
        JSRelacional op=null;
        JSAritmetica arit=null;
        JSExpresion expr1=null;
        JSExpresion expr2=null;
    arit = AdditiveExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      t = jj_consume_token(MENOR);
      expr2 = AdditiveExpression();
                op=new JSRelacional(t, expr1, expr2);
    }
                Token aux = arit._t;
                op=new JSRelacional(aux);//Modificar
                {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  static final public JSAritmetica AdditiveExpression() throws ParseException {
        Token t=null;
        JSAritmetica op=null;
        JSAritmetica op2=null;
        JSExpresion expr1=null;
        JSExpresion expr2=null;
    expr1 = PrimaryExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(MAS);
      expr2 = PrimaryExpression();
                        op=new JSAritmetica(t, expr1, expr2);
                        op.reducir();
                        {if (true) return op;}
    }
                        op2=new JSAritmetica(t,op,expr1);
                        op2.reducir();
                        {if (true) return op2;}
    throw new Error("Missing return statement in function");
  }

  static final public JSExpresion PrimaryExpression() throws ParseException {
        JSExpresion cons =null;
        Token t = null;
        boolean islit = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENDRCHA:
      jj_consume_token(PARENDRCHA);
      Expresion();
      jj_consume_token(PARENIZQ);
                                        islit = false;
      break;
    case IDENTIFICADOR:
      t = jj_consume_token(IDENTIFICADOR);
                                        cons = new JSIdentificador(t, "ID", 4);
      break;
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
                                        cons = new JSNumero(t);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
                                        cons = new JSCadena(t);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return cons;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(ASIGNACION)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(PARENDRCHA)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public eg1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xb9938801,0x1000000,0x0,0xb9138800,0xb9138800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8,0x0,0x10,0x8,0x8,0x10,0x40,0x10,0x4000,0x200000,0x100,0x200,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public eg1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public eg1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new eg1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public eg1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new eg1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public eg1(eg1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(eg1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[56];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 56; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
